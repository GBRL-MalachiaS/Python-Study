Claro! A **Semana 6** deve aprofundar ainda mais os conceitos de **Programação Orientada a Objetos (POO)** com tópicos avançados como **herança múltipla**, **polimorfismo**, **métodos estáticos e de classe**, além do uso de **módulos e pacotes**.

Aqui estão alguns exercícios práticos focados nesses conceitos. 

### Semana 6: Programação Orientada a Objetos (POO) Avançada

#### 1. **Herança Múltipla**
1. **Exercício 1:** Crie três classes:
   - `Veiculo`: com os atributos `marca` e `modelo`, e um método `informacoes()` que exibe esses atributos.
   - `Terrestre`: com o atributo `num_rodas` e o método `info_terrestre()` que exibe o número de rodas.
   - `Aquatico`: com o atributo `tipo_embarcacao` e o método `info_aquatico()` que exibe o tipo de embarcação.
   
   Depois, crie uma classe chamada `Amfibio` que herde de `Veiculo`, `Terrestre` e `Aquatico`. Crie um objeto dessa classe e exiba todas as informações.

Resposta:

class Veiculo:
    def __init__(self, marca: str, modelo: str) -> None:
        self.marca = marca
        self.modelo = modelo

    def informacao(self):
        print(f'Marca: {self.marca} - Modelo: {self.modelo}')


class Terrestre():
    def __init__(self, num_rodas: int) -> None:
        self.num_rodas = num_rodas

    def info_terrestre(self):
        print(f'Numero de rodas: {self.num_rodas}')


class Aquatico():
    def __init__(self, tipo_embarcacao: str) -> None:
        self.tipo_embarcacao = tipo_embarcacao

    def info_aquatico(self,):
        print(f'Tipo de embarcação: {self.tipo_embarcacao}')


class Amfibio(Aquatico, Veiculo, Terrestre):
    def __init__(self, marca: str, modelo: str, num_rodas: int, tipo_embarcacao: str) -> None:

        Veiculo.__init__(self, marca, modelo)
        Terrestre.__init__(self, num_rodas)
        Aquatico.__init__(self, tipo_embarcacao)

    def exibir_informacoes(self):
        self.informacao()
        self.info_terrestre()
        self.info_aquatico()


carro1 = Amfibio("Chevrolet", "Corsa Classic", 4, "Veiculo Terrestre")

carro1.exibir_informacoes()


2. **Exercício 2:** Crie uma classe `Pessoa` com os atributos `nome` e `idade`. Em seguida, crie uma classe `Trabalhador` com o atributo `salario`. Crie uma terceira classe `Funcionario`, que herde tanto de `Pessoa` quanto de `Trabalhador`. Crie um objeto da classe `Funcionario` e exiba as informações do nome, idade e salário.

Resposta:
class Pessoa:
    def __init__(self, nome: str, idade: int) -> None:
        self.nome = nome
        self.idade = idade


class Trabalhador:
    def __init__(self, salario: float) -> None:
        self.salario = salario


class Funcionario(Trabalhador, Pessoa):
    def __init__(self, salario: float, nome: str, idade: int) -> None:
        Pessoa.__init__(self, nome, idade)
        Trabalhador.__init__(self, salario)

    def exibir_dados(self):
        print(f'Nome: {self.nome}')
        print(f'Salario: R${self.salario}')
        print(f'Idade: {self.idade}')


funcionario1 = Funcionario(2563.35, "Gabriel Malachias", 30)
funcionario1.exibir_dados()


#### 2. **Polimorfismo**
3. **Exercício 3:** Crie uma classe `Animal` com o método `emitir_som()`. Depois, crie três subclasses:
   - `Cachorro`: que sobrescreve o método `emitir_som()` para exibir `"O cachorro está latindo"`.
   - `Gato`: que sobrescreve o método `emitir_som()` para exibir `"O gato está miando"`.
   - `Vaca`: que sobrescreve o método `emitir_som()` para exibir `"A vaca está mugindo"`.
   
   Crie uma função chamada `fazer_barulho()` que receba um objeto do tipo `Animal` e chame o método `emitir_som()`. Teste com cada uma das subclasses.

Reposta:

class Animal:
    def __init__(self, nome: str) -> None:
        self.nome = nome
        
    def emitir_som(self):
        print(f'O animal {self.nome} está emitindo som')
    
    
class Cachorro(Animal):
    def emitir_som(self):
        print(f'O Cachorro {self.nome} está latindo')
        
class Gato(Animal):
    def emitir_som(self):
        print(f'O Gato  {self.nome} está miando')
        
class Vaca(Animal):
    def emitir_som(self):
        print(f'O Vaca {self.nome} está mugindo')


def fazer_barulho(animal):
    return animal.emitir_som()


cachorro = Cachorro("Rex")
gato = Gato("miau miau")
vaca = Vaca("vacoza")


fazer_barulho(cachorro)
fazer_barulho(gato)
fazer_barulho(vaca)



#### 3. **Métodos Estáticos e de Classe**
4. **Exercício 4:** Crie uma classe `Calculadora` com dois métodos:
   - Um método **estático** chamado `somar()` que recebe dois números e retorna a soma.
   - Um método **de classe** chamado `criar_calculadora()`, que retorna uma instância da classe.
   
   Teste o método estático sem criar uma instância da classe e, em seguida, teste o método de classe para criar uma instância.

Resposta:

class Calculadora():
   def __init__(self, numero1, numero2) -> None:
      self.numero1 = numero1
      self.numero2 = numero2
   
   @staticmethod
   def somar(a,b):
      return a+b
   
   @classmethod
   def criar_calculadora(cls, numero1, numero2):
      
      return cls(numero1,numero2) 
   
   
soma = Calculadora.somar(2,3)
print(soma)

nova_calc = Calculadora.criar_calculadora(1,2)

print(f'{nova_calc.numero1} e {nova_calc.numero2}')


#### 4. **Módulos e Pacotes**
5. **Exercício 5:** Crie dois arquivos Python: `matematica.py` e `principal.py`.
   - No arquivo `matematica.py`, crie duas funções: `soma(a, b)` e `multiplicacao(a, b)`.
   - No arquivo `principal.py`, importe as funções de `matematica.py` e use-as para realizar operações de soma e multiplicação.

  
resposta: 
from matematica import soma, multiplicacao


print(multiplicacao(1,2))
print(soma(3,4))

Arquivo matematica.py

def soma(a,b):
    return a+b

def multiplicacao(a,b):
    return a*b

#### 5. **Desafio**
6. **Desafio:** Crie um sistema de gerenciamento de contas bancárias com as seguintes classes:
   - `Conta`: com atributos `numero`, `titular`, e `saldo`. Deve ter métodos `depositar(valor)` e `sacar(valor)`.
   - `ContaCorrente`: herda de `Conta` e tem um atributo adicional `limite_credito`. Deve permitir saques que ultrapassem o saldo, mas respeitando o limite de crédito.
   - `ContaPoupanca`: herda de `Conta` e tem um atributo `taxa_juros`. Deve ter um método adicional `render_juros()`, que aumenta o saldo de acordo com a taxa de juros.
   
   Crie um menu interativo para:
   - Criar contas (corrente ou poupança).
   - Depositar em uma conta.
   - Sacar de uma conta.
   - Exibir saldo de uma conta.

---

### Explicação de cada exercício:

1. **Herança Múltipla**: Os dois primeiros exercícios mostram como combinar múltiplas classes em uma única classe que herda características e comportamentos de várias fontes. Isso é útil em cenários onde objetos pertencem a múltiplas categorias, como veículos anfíbios (que são terrestres e aquáticos).

2. **Polimorfismo**: O terceiro exercício explora como objetos de classes diferentes podem ser tratados de maneira uniforme, permitindo o uso de uma interface comum, como a função `fazer_barulho()` que pode ser usada com qualquer tipo de `Animal`.

3. **Métodos Estáticos e de Classe**: O exercício sobre métodos estáticos e de classe ensina como usar funções relacionadas à classe que não precisam acessar atributos de instância (métodos estáticos) e como usar funções que trabalham com a classe em si (métodos de classe).

4. **Módulos e Pacotes**: No exercício de módulos e pacotes, você aprende a organizar seu código em arquivos separados e importar funcionalidades entre eles, promovendo a reutilização e modularidade do código.

5. **Desafio**: O desafio integra todos os conceitos de POO, incluindo herança, polimorfismo, e encapsulamento, para criar um sistema bancário que suporta múltiplas operações e diferentes tipos de contas. O uso de um menu interativo torna o exercício mais prático e realista.

---

Esses exercícios vão ajudar a solidificar os conceitos avançados de POO e programação modular. Se precisar de ajuda com qualquer um deles ou com as soluções, estou à disposição!